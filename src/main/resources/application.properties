# Configuración MySql
# En el URL se indican dos parámetros:
# El serverTimezone. Ver nuestro timezone en https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# La gestión del ssl
spring.datasource.url=jdbc:mysql://localhost/db_springboot?serverTimezone=Europe/Madrid&useSSL=false
spring.datasource.username=jmmm
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Se indica el dialecto para poder trabajar con MySql 8.
# Si fuera la versión 5.7, por ejemplo, el dialecto sería MySQL57Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Configuración de desarrollo para realizar pruebas
# Crea las tablas de forma automática a través de los mapping (anotaciones) de las clases @Entity
# Cuando cerramos la aplicación se eliminan las tablas.
# En PRODUCCION hay que QUITAR esta configuración y tener las tablas creadas antes de realizar el deploy
#
# Cuando hay relaciones entre tablas con claves foráneas, etc. con esta opción, como las tablas no están
# físicamente creadas, da error al arrancar la aplicación cuando intenta el borrado.
# No hacer caso al error, es más bien un bug, o crear las tablas físicamente y eliminar esta configuración
spring.jpa.hibernate.ddl-auto=create-drop

# Configuración para que muestre las consultas SQL nativas que genera JPA en el terminal
logging.level.org.hibernate.SQL=debug



# Máximo de MB del archivo que permite subir nuestra app y en el request
# En SpringBoot 2 se usa spring.servlet
# En SpringBoot 1 se usaba spring.http
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB



# Configuración para que SpringBoot soporte el MediaTypes para PDF
# También hay que configurar un parámetro en el componente que se encargue de manejar los ViewResolver
# para que podamos tener diferentes opciones de vista
# Es decir, podemos tener:
#  CONTENT NEGOTIATION
#   factura/ver/5 -----> FacturaController -----> ContentNegotiation View Resolver -----> Thymeleaf ViewResolver (HTML)
#   factura/ver/5?format=pdf -----> FacturaController -----> ContentNegotiation View Resolver -----> BeanName ViewResolver (FacturaPdfView)
#   factura/ver/5?format=xls -----> FacturaController -----> ContentNegotiation View Resolver -----> BeanName ViewResolver (FacturaXlsView)
# Por detrás de escena, este parámetro también va a modificar la cabecera HttpResponse para que acepte el Content-Type en formato
# application/pdf

# Permite agregar un parámetro en la url con el tipo de formato, para desplegar en pdf, en excel...
# Por defecto es html (por lo que no se ha hecho nada antes, ya que no hacía falta)
spring.mvc.contentnegotiation.favor-parameter=true
# Este es el parámetro que modifica la cabecera de la respuesta con application/pdf
spring.mvc.contentnegotiation.media-types.pdf=application/pdf

# Para saber que media types hay que usar, buscar en Chrome media types xlsx
# Se va a usar la librería Apache Poi para poder exportar a Excel
# https://poi.apache.org/components/index.html
spring.mvc.contentnegotiation.media-types.xlsx=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

# CSV y su MIME Type o Media Types o Content Type
# Ahora, el Content Negotiation que se encarga de administrar los diferentes ViewResolver va a encontrar la vista
# listar.csv
spring.mvc.contentnegotiation.media-types.csv=text/csv
